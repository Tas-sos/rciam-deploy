---
#- name: Configure maximum amount of memory SSP PHP scripts may consume
#  template:
#    src: "etc/php5/apache2/conf.d/99-memory-limit.ini.j2"
#    dest: "{{ ssp_php_apache_conf_path }}/99-memory-limit.ini"
#    backup: no
#    force: yes
#  become: true
#  notify:
#    - restart webserver

- name: Generate SHA-256 encrypted hash of SSP admin password
  script: "ssha256pwgen-{{ ssp_version }}.php {{ ssp_path }} {{ ssp_adminpassword }}"
  args:
    creates: "{{ ssp_configdir }}/config.php"
  register: ssp_adminpasswordhash_new

- name: Check existing SHA-256 encrypted hash of SSP admin password
  script: "SimpleSAML_Configuration-{{ ssp_version }}.php {{ ssp_path }} {{ ssp_adminpassword_key }}"
  args:
    removes: "{{ ssp_configdir }}/config.php"
  register: ssp_adminpasswordhash_old

- name: Configure SHA-256 encrypted hash of SSP admin password
  set_fact:
    ssp_adminpasswordhash: "{{ ssp_adminpasswordhash_new.stdout if ssp_adminpasswordhash_new is changed else ssp_adminpasswordhash_old.stdout }}"

- name: Generate SSP secret salt
  shell: tr -c -d '0123456789abcdefghijklmnopqrstuvwxyz' </dev/urandom | dd bs=32 count=1 status=none
  args:
    creates: "{{ ssp_configdir }}/config.php"
  register: ssp_secretsalt_new

- name: Check existing SSP secret salt
  script: "SimpleSAML_Configuration-{{ ssp_version }}.php {{ ssp_path }} {{ ssp_secretsalt_key }}"
  args:
    removes: "{{ ssp_configdir }}/config.php"
  register: ssp_secretsalt_old

- name: Configure SSP secret salt
  set_fact:
    ssp_secretsalt: "{{ ssp_secretsalt_new.stdout if ssp_secretsalt_new is changed else ssp_secretsalt_old.stdout }}"

- name: Configure SSP
  template:
    src: "config/config-{{ ssp_version }}.php.j2"
    dest: "{{ ssp_configdir }}/config.php"
    backup: yes
    force: yes
  become: yes
  notify:
    - restart webserver

- name: Generate self-signed SP certificates
  command: openssl req -newkey rsa:2048 -new -x509 -days 3652 -subj "/CN={{ item.ssl_certificate_cn }}" -nodes -out sp-{{ item.name }}.crt -keyout sp-{{ item.name }}.key
  args:
    chdir: "{{ ssp_certdir }}"
    creates: "{{ ssp_certdir }}/sp-{{ item.name }}.key"
  with_items: "{{ ssp_authsources_saml }}"
  when: item.generate_ssl_certificate
  become: yes

- name: Ensure SP certificate keys are installed
  file:
    state: file
    path: "{{ ssp_certdir }}/sp-{{ item.name }}.key"
    owner: "{{ ssp_webuser }}"
    group: "{{ ssp_webgroup }}"
    mode: "0600"
  with_items: "{{ ssp_authsources_saml }}"
  become: yes

- name: Ensure SP certificates are installed
  file:
    state: file
    path: "{{ ssp_certdir }}/sp-{{ item.name }}.crt"
    owner: "{{ ssp_webuser }}"
    group: "{{ ssp_webgroup }}"
    mode: "0644"
  with_items: "{{ ssp_authsources_saml }}"
  become: yes

- name: Configure SSP authN sources
  template:
    src: "config/authsources-{{ ssp_version }}.php.j2"
    dest: "{{ ssp_configdir }}/authsources.php"
    backup: yes
    force: yes
  become: yes
  tags:
    - authsources

- name: Generate self-signed IdP certificates
  command: openssl req -newkey rsa:2048 -new -x509 -days 3652 -subj "/CN={{ item.ssl_certificate_cn }}" -nodes -out idp-{{ item.entity_id }}.crt -keyout idp-{{ item.entity_id }}.key
  args:
    chdir: "{{ ssp_certdir }}"
    creates: "{{ ssp_certdir }}/idp-{{ item.entity_id }}.key"
  with_items: "{{ ssp_idp_hosts }}"
  when: ssp_idp_saml20_enabled or ssp_idp_shib13_enabled
  become: yes

- name: Ensure IdP certificate keys are installed
  file:
    state: file
    path: "{{ ssp_certdir }}/idp-{{ item.entity_id }}.key"
    owner: "{{ ssp_webuser }}"
    group: "{{ ssp_webgroup }}"
    mode: "0600"
  with_items: "{{ ssp_idp_hosts }}"
  when: ssp_idp_saml20_enabled or ssp_idp_shib13_enabled
  become: yes

- name: Ensure IdP certificates are installed
  file:
    state: file
    path: "{{ ssp_certdir }}/idp-{{ item.entity_id }}.crt"
    owner: "{{ ssp_webuser }}"
    group: "{{ ssp_webgroup }}"
    mode: "0644"
  with_items: "{{ ssp_idp_hosts }}"
  when: ssp_idp_saml20_enabled or ssp_idp_shib13_enabled
  become: yes

- name: Configure SSP hosted SAML 2.0 IdP metadata
  template:
    src: metadata/saml20-idp-hosted.php.j2
    dest: "{{ ssp_metadatadir }}/saml20-idp-hosted.php"
    backup: yes
    force: yes
  when: ssp_idp_saml20_enabled
  become: yes
  tags:
    - saml20-idp-hosted

- name: Configure SSP hosted SAML 1.1 IdP metadata
  template:
    src: metadata/shib13-idp-hosted.php.j2
    dest: "{{ ssp_metadatadir }}/shib13-idp-hosted.php"
    backup: yes
    force: yes
  when: ssp_idp_shib13_enabled
  become: yes

- name: Enable required SSP modules
  command: touch "{{ ssp_path }}/modules/{{ item }}/enable"
  args:
    creates: "{{ ssp_path }}/modules/{{ item }}/enable"
  with_items: "{{ ssp_mods_enabled }}"
  become: yes

- name: Disable unnecessary SSP modules
  command: touch "{{ ssp_path }}/modules/{{ item }}/disable"
  args:
    creates: "{{ ssp_path }}/modules/{{ item }}/disable"
  with_items: "{{ ssp_mods_disabled }}"
  become: yes

- name: Ensure required SSP metarefresh module dirs exist
  file: path={{ ssp_metadatadir }}/{{ item.output_dir }} state=directory owner={{ssp_webuser }} group={{ ssp_webgroup }}
  with_items: "{{ ssp_mod_metarefresh_sets }}"
  when: "'metarefresh' in ssp_mods_enabled"
  become: yes
  tags:
    - metarefresh

- name: Configure SSP metarefresh module
  template:
    src: "config/config-metarefresh-{{ ssp_version }}.php.j2"
    dest: "{{ ssp_configdir }}/config-metarefresh.php"
    backup: yes
    force: yes
  when: "'metarefresh' in ssp_mods_enabled"
  register: ssp_mod_metarefresh_config
  become: yes
  tags:
    - metarefresh

- name: Generate SSP cron module secret
  shell: tr -c -d '0123456789abcdefghijklmnopqrstuvwxyz' </dev/urandom | dd bs=32 count=1 status=none
  args:
    creates: "{{ ssp_configdir }}/module_cron.php"
  when: "'cron' in ssp_mods_enabled"
  register: ssp_mod_cron_secret_new
  tags:
    - metarefresh

- name: Check existing SSP cron module secret
  command: awk -F"'" '/key/ { print $4 }' "{{ ssp_configdir }}/module_cron.php"
  args:
    removes: "{{ ssp_configdir }}/module_cron.php"
  when: "'cron' in ssp_mods_enabled"
  register: ssp_mod_cron_secret_old
  tags:
    - metarefresh

- name: Configure SSP cron module secret
  set_fact:
    ssp_mod_cron_secret: "{{ ssp_mod_cron_secret_new.stdout if ssp_mod_cron_secret_new is changed else ssp_mod_cron_secret_old.stdout }}"
  when: "'cron' in ssp_mods_enabled"
  tags:
    - metarefresh

- name: Configure SSP cron module
  template:
    src: config/module_cron.php.j2
    dest: "{{ ssp_configdir }}/module_cron.php"
    backup: yes
    force: yes
  when: "'cron' in ssp_mods_enabled"
  become: yes
  tags:
    - metarefresh

- name: Configure SSP cron jobs
  cron:
    name: "{{ item.name }}"
    user: "{{ item.user | default('root') }}"
    cron_file: "{{ item.file }}"
    # Set maximum time to 300 seconds for preventing curl job from hanging
    job: "curl -k --silent -m 300 \"{{ ssp_mod_cron_url }}?key={{ ssp_mod_cron_secret }}&tag={{ item.tag }}\""
    minute: "{{ item.minute | default(omit) }}"
    hour: "{{ item.hour | default(omit) }}"
    day: "{{ item.day | default(omit) }}"
    month: "{{ item.month | default(omit) }}"
  with_items: "{{ ssp_mod_cron_entries }}"
  when: "'cron' in ssp_mods_enabled"
  become: yes
  tags:
    - metarefresh

- name: Configure SSP cron job variables
  cronvar:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    cron_file: "{{ item.file }}"
  with_items: "{{ ssp_mod_cron_vars }}"
  when: "'cron' in ssp_mods_enabled"
  become: yes
  tags:
    - metarefresh

#TODO- name: Refresh SSP remote SAML metadata
#  shell: "curl -k --silent \"https://localhost/{{ ssp_baseurlpath }}/module.php/cron/cron.php?key={{ ssp_mod_cron_secret }}&tag={{ item }}\" > /dev/null 2>&1"
#  with_items:
#    - hourly
#    - daily
#  when: "ssp_mod_metarefresh_config | changed"
#  become: yes

- name: Configure SSP discopower module
  template:
    src: config/module_discopower.php.j2
    dest: "{{ ssp_configdir }}/module_discopower.php"
    backup: yes
    force: yes
  when: "'discopower' in ssp_mods_enabled"
  become: yes

- name: Update SSP discopower module dictionary definitions
  template:
    src: modules/discopower/dictionaries/tabs.definition.json.j2
    dest: "{{ ssp_path }}/modules/discopower/dictionaries/tabs.definition.json"
    backup: yes
    force: yes
  when: "'discopower' in ssp_mods_enabled"
  become: yes
